#!/usr/bin/env python3

import os
import re
import sys
from   datetime import datetime
import json
import glob
import argparse
from pathlib import Path
from pprint import pprint
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By


FILENAMES = {
		'filename_arch16n':'english.0.properties',
		'filename_css':'ui_styling.css',
		'filename_data_schema':'data_schema.xml',
		'filename_ui_logic':'ui_logic.bsh',
		'filename_ui_schema':'ui_schema.xml',
		'filename_validation':'validation.xml'
}

USERNAME = 'faimsadmin@intersect.org.au'
PASSWORD = 'Pass.123'
SERVER 		= 'dev26'
BASE_URL    = 'http://{}.fedarch.org'.format(SERVER)
error_state = False
DEBUG = True

parser = argparse.ArgumentParser(description='Upload autogenerated module to faims server')
parser.add_argument('module_path', nargs='?',type=str, default='module', help="path to module document directory")
parser.add_argument('--config', type=str, default="conf.json", help="location of the config file")
parser.add_argument('--rm', action='store_true', help="remove module(s) with same path name")
parser.add_argument('--replace', action='store_true', help="remove module(s) with same base name and upload new one")
parser.add_argument('--state-string', default='automatic', help="An extra state string in the module name?")
args = parser.parse_args()

# Make sure all specification files are in the path'd directory
module_location = Path(os.getcwd()) / args.module_path

for file in FILENAMES:
	if (module_location / FILENAMES[file]).is_file():
		FILENAMES[file] = module_location / FILENAMES[file]
	else:
		raise FileNotFoundError(module_location / FILENAMES[file])




try:
	with open('conf.json', 'r') as confjson:
		module_name = json.load(confjson)['module_name']

except:
	moduleParts = module_location.parts
	
	if moduleParts[-1] == 'module': 
		module_name = str(moduleParts[-2])
		with open(module_location / '..' / 'conf.json', 'w') as confjson:
			json.dump( {'module_name':module_name}, confjson)
	else:                          
		module_name = str(moduleParts[-1])
		with open(module_location / 'conf.json', 'w') as confjson:
			json.dump({'module_name':module_name}, confjson)



print("Working on module with the name \"{}\"...".format(module_name))   




def login(driver, baseurl, username, password):
	driver.get(baseurl)
	element = WebDriverWait(driver, 10).until(
			EC.element_to_be_clickable((By.XPATH, "//form"))
	)
	username_element = driver.find_element_by_name("user[email]" )
	username_element.send_keys(username)
	password_element = driver.find_element_by_name("user[password]" )
	password_element.send_keys(password)
	element = driver.find_element_by_xpath("//input[@name='commit']")
	element.click()

def addFile(driver, file_path, field_name):
	element = driver.find_element_by_xpath("//input[@name='{}']".format(field_name) )
	element.send_keys(str(file_path))

def upload_module(driver, module_name, filenames,args, do_upload_data_schema=False):
	try:
		if do_upload_data_schema:
			raise Exception
			# We just need to go do stuff in the except block, I guess?
		print("//a[contains(text(), '{} {}')]".format(module_name, args.state_string))		
		element = WebDriverWait(driver, 1).until(
				EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), '{} {}')]".format(module_name, args.state_string)))
		)
		element.click()
		print("Editing module...")
		element = WebDriverWait(driver, 3).until(
				EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Edit Module')]"))
		)
		element.click()
		
	except:	
		print("Creating new module")
		element = WebDriverWait(driver, 10).until(
				EC.element_to_be_clickable((By.XPATH, "//a[@href='/project_modules/new']"))
		)
		element.click()
		do_upload_data_schema=True
	

	form_element = WebDriverWait(driver, 10).until(
			EC.element_to_be_clickable((By.XPATH, "//form"))
	)
	element = driver.find_element_by_xpath("//input[@name='project_module[name]']" )
	#module_name += datetime.now().strftime(' {} %Y-%m-%d'.format(args.state_string))
	element.clear()
	element.send_keys("{} {} {}".format(module_name, args.state_string, datetime.now().strftime('%Y-%m-%d')))

	element = driver.find_element_by_xpath("//input[@name='project_module[version]']" )
	element.clear()
	element.send_keys(str(datetime.now()))

	addFile(driver, filenames['filename_arch16n']    		, 'project_module[arch16n]')
	addFile(driver, filenames['filename_css']        		, 'project_module[css_style]')
	if do_upload_data_schema:
		addFile(driver, filenames['filename_data_schema'] 	, 'project_module[data_schema]')
	addFile(driver, filenames['filename_ui_logic']    		, 'project_module[ui_logic]')
	addFile(driver, filenames['filename_ui_schema']   		, 'project_module[ui_schema]')
	addFile(driver, filenames['filename_validation'] 		, 'project_module[validation_schema]')

	# https://stackoverflow.com/a/17530571/263449
	element.submit()

chrome_options = webdriver.ChromeOptions()
#chrome_options.add_experimental_option('prefs', profile)
driver = webdriver.Chrome(options=chrome_options)
try:
	login(driver, BASE_URL, USERNAME, PASSWORD)
	upload_module(driver, module_name, FILENAMES, args)

finally:
	if not error_state:
		if not DEBUG:
			driver.quit()
