import android.util.Log;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

final String USER_MENU_PATH = "{{user-menu-path}}";
userMenuPath = USER_MENU_PATH; // Depricated. Use `USER_MENU_PATH` instead

final long SESS_START_TIME = System.currentTimeMillis();

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// The tab group which was previously displayed
String redirectTab;     // makes newTab work as expected
String username = "";
String userid   = "";

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

if (isNull(USER_MENU_PATH)) {
  Log.w("", "`USER_MENU_PATH` is empty or null");
}

/******************************************************************************/
/*                                STRING UTILS                                */
/******************************************************************************/
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

String dbReplaceFirst(String haystack, String needle, String replacement) {
  String escapedReplacement = DatabaseUtils.sqlEscapeString(replacement);
  return replaceFirst(haystack, needle, escapedReplacement);
}

String dbReplaceFirst(String haystack, String replacement) {
  return dbReplaceFirst(haystack, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String  PREVIOUSLY_DISPLAYED_TAB_GROUP = "";
String  CURRENTLY_DISPLAYED_TAB_GROUP  = "";
Map     REF_TO_TYPE                    = new HashMap();
HashSet DATA_REFS                      = new HashSet();
HashSet NO_UI_REFS                     = new HashSet();
HashSet HIER_REFS                      = new HashSet();
Map     VP_REF_TO_REF                  = new HashMap();

{{refs-to-types}}

{{data-refs}}

{{no-ui-refs}}

{{vp-ref-to-ref}}

{{hier-refs}}

String getType(String ref) {
  String type = REF_TO_TYPE.get(ref);
  if (type == null) return "";
  else              return type;
}

boolean hasData(String ref) {
  return DATA_REFS.contains(ref);
}

boolean hasNoUi(String ref) {
  return NO_UI_REFS.contains(ref);
}

String getVpRef(String ref) {
  return VP_REF_TO_REF.get(ref);
}

boolean hasVpRef(String ref) {
  return getVpRef(ref) != null;
}

boolean isHier(String ref) {
  return HIER_REFS.contains(ref);
}

List getTabGroups() {
  List tabGroups = new ArrayList();
  {{get-tab-groups}}
  return tabGroups;
}

List getStartingIdRefs() {
  List l = new ArrayList();
  {{control-starting-id-paths}}
  return l;
}

List getMenuTypes() {
  List menuTypes = new ArrayList();
  {{menu-ui-types}}
  return menuTypes;
}

List getMediaTypes() {
  List mediaTypes = new ArrayList();
  {{media-ui-types}}
  return mediaTypes;
}

boolean isMenuType(String type) {
  return getMenuTypes().contains(type);
}

boolean isMediaType(String type) {
  return getMediaTypes().contains(type);
}

boolean hasMenuType(String ref) {
  String refType = getType(ref);
  return isMenuType(refType);
}

boolean hasMediaType(String ref) {
  String type = getType(ref);
  return isMediaType(type);
}

boolean isFlaggedNodata(String tabGroup) {
  List flaggedTabGroups = new ArrayList();
  {{is-flagged-nodata}}
  return flaggedTabGroups.contains(tabGroup);
}

void updateDisplayedTabGroup(String tabGroup) {
  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String guessArch16nVal(String ref) {
  String arch16nKey = getArch16nKey(ref);

  if (isNull(arch16nKey)) return "";
  arch16nKey = arch16nKey.replaceAll("_", " ");
  arch16nKey = arch16nKey.replaceAll("^\\{", "");
  arch16nKey = arch16nKey.replaceAll("\\}$", "");
  return arch16nKey;
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef)) {
    return null;
  }

  String attributeName = guiElementRef.replaceAll("_", " ");
  return attributeName;
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a record is first created.                */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*                                                                            */
/* A single call to `bindOnEvents` must occur after all the `addOnEvent` and  */
/* `delOnEvents` calls. Calling `bindOnEvents` is what actually establishes   */
/* the bindings once they have been added to the accumulator.                 */
/******************************************************************************/
Map EVENTS        = new HashMap(); // (ref, event type) -> callback statement
Set CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`
CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");

String getKey(String ref, String event) {
  return ref + SEP + event;
}

/* Returns the set of statements bound to an element at `ref` and occuring on
 * `event`.
 */
ArrayList getStatements(String ref, String event) {
  String    key = getKey(ref, event);
  ArrayList val = (ArrayList) EVENTS.get(key);

  if (val == null) return new ArrayList();
  else             return val;
}

void addStatement(String ref, String event, String statement) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `EVENTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `EVENTS.put` is required.

  String    key = getKey(ref, event);
  ArrayList val = getStatements(ref, event);
  val.add(statement);
  EVENTS.put(key, val);
}

String getStatementsString(String ref, String event) {
  ArrayList stmts = getStatements(ref, event);
  String stmtsStr = "";
  for (String s : stmts) {
    stmtsStr += s;
    stmtsStr += "; ";
  }
  return stmtsStr;
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  while(getStatements(ref, event).remove(statement));
}

void addOnEvent(String ref, String event, String statement) {
  // Calling `delOnEvent()` first ensures statement occurs once in the list, at
  // the end.
  delOnEvent  (ref, event, statement);
  addStatement(ref, event, statement);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : EVENTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work. The
 * "leave" event is really triggered upon "show" of another tab.
 */
for (tg : getTabGroups()) {
  String ref      = tg;
  String event    = "show";
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, event, callback);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, event, callback);
}

/******************************************************************************/
/*                     LOCALSETTINGS VIEW/TABLE CREATION                      */
/******************************************************************************/
void makeLocalId(){
  fetchOne(
      "CREATE TABLE IF NOT EXISTS perflog (" +
      "    id              INTEGER PRIMARY KEY," +
      "    deviceModel     TEXT," +
      "    sessStartMs     INTEGER," +
      "    srcLine         TEXT," +
      "    query           TEXT," +
      "    queryStartMs    INTEGER," +
      "    queryStopMs     INTEGER," +
      "    numAentvalue    INTEGER," +
      "    numArchentity   INTEGER," +
      "    numRelationship INTEGER," +
      "    numAentreln     INTEGER " +
      ")"
  );

  fetchOne(
      "CREATE TABLE IF NOT EXISTS localSettings (" +
      "    key   TEXT PRIMARY KEY," +
      "    value TEXT" +
      ")"
  );

  fetchOne(
      "DROP VIEW IF EXISTS parentchild"
  );

  fetchOne(
      "CREATE VIEW parentchild AS "+
      "           SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename, createdat"+
      "             FROM (SELECT uuid, participatesverb, aenttypename, relationshipid, relntimestamp as createdat"+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) parent "+
      "             JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) child "+
      "               ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid)"
  );
}
makeLocalId();

/******************************************************************************/
/*                            PERFORMANCE TESTING                             */
/*                                                                            */
/* Code to a) time queries; and b) create dummy records. (The vast majority   */
/* the code is for the latter.)                                               */
/******************************************************************************/
import android.database.DatabaseUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.util.concurrent.atomic.AtomicInteger;
import android.os.Build.MODEL;
import java.util.concurrent.ConcurrentLinkedQueue;

ConcurrentLinkedQueue PERF_FILES             = null;
AtomicInteger         PERF_NUM_CBS_DONE_FILE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SAVE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SET  = null;
AtomicInteger         PERF_NUM_CBS_TODO_FILE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SAVE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SET  = null;
boolean               PERF_DO_LOG_QUERIES    = false;
boolean               PERF_ALLOW_CREATION    = false;
String                PERF_TEST_IMG          = "";
                      PERF_TYPE_TREE         = null;

int getNumDummyRecords() {
  getNumDummyRecords(PERF_TYPE_TREE);
}

int getNumDummyRecords(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyRecords(child);

  boolean isRoot   = isNull(tree.label);
  int     thisNode =        tree.data;

  if (isRoot) return 0        + 1        * childSum;
  else        return thisNode + thisNode * childSum;
}

Tree(String label, Object data) {
  String label    = label;
  Object data     = data;
         parent   = null;
  List   children;

  void addChild(tree) {
    if (super.children == null)
      super.children = new ArrayList();

    tree.setParent(super);
    super.children.add(tree);
  }

  getChild(int i) {
    return super.children.get(i);
  }

  int getIndex() {
    if (super.getParent() == null)
      return -1;
    return super.getParent().getChildren().indexOf(super);
  }

  getDescendant(String ref) {
    String[] refStrArr  = ref.split("/");
    List     refIntList = new ArrayList();

    for (String refStr : refStrArr) {
      int refInt = Integer.parseInt(refStr);
      refIntList.add(refInt);
    }

    return super.getDescendant(refIntList);
  }

  getDescendant(List ref) {
    if (ref.size() == 0)
      return super;

    int  head = ref.get(0);
    List tail = ref.subList(1, ref.size());

    if (ref.size() == 1) return getChild(head);
    if (ref.size() >= 2) return getChild(head).getDescendant(tail);
  }

  String getAncestorRefString(String sep, String key) {
    String s = "";
    for (Object n = super; n.getParent() != null; n = n.getParent()) {
      String val = "";
      if (key.equals("index")) val = n.getIndex() + "";
      if (key.equals("label")) val = n.label;

      s = sep + val + s;
    }

    if (!s.equals(""))
      s = s.substring(sep.length(), s.length()); // Remove initial `sep`

    return s;
  }

  String getAncestorRefString() {
    return getAncestorRefString("/", "index");
  }

  List getChildren() {
    if (super.children == null)
      return new ArrayList();
    return super.children;
  }

  int getNumNodes() {
    int sum = 1;
    for (child : super.getChildren())
      sum += child.getNumNodes();
    return sum;
  }

  void setParent(tree) {
    super.parent = tree;
  }

  getParent() {
    return super.parent;
  }

  String toString() {
    String s = "\n- " + super.label + " (" + data + ")";
    if (super.children != null)
      for (c : super.children)
        s += c.toString().replace("\n", "\n\t\t");
    return s;
  }

  return this;
}

TimedFetchCallback(String query, FetchCallback cb, int callerIdx) {
  int           callerIdx = callerIdx;
  String        query     = query;
  FetchCallback cb        = cb;
  bsh.CallStack cs_       = this.callstack.copy();

  long startTime = System.currentTimeMillis(); // Timer starts here
  long stopTime  = -1;

  void onFetch(Object result) {
    super.stopTimer();
    super.updatePerfLog();

    if (super.cb != null)
      super.cb.onFetch(result);
  }

  void onError(String message) {
    if (super.cb != null)
      super.cb.onError(message);
  }

  void stopTimer() {
    super.stopTime = System.currentTimeMillis();
  }

  double getElapsedMillis() {
    if (stopTime < 0)
      return -Double.MAX_VALUE;
    return super.stopTime - super.startTime;
  }

  void updatePerfLog() {
    String deviceModel  = android.os.Build.MODEL;
    String sessStartMs  = SESS_START_TIME + "";
    String srcLine      = super.cs_.get(super.callerIdx).getInvocationLine()+"";
    String query        = super.query;
    String queryStartMs = super.startTime + "";
    String queryStopMs  = super.stopTime + "";

    String updateQuery = "";
    updateQuery += " INSERT INTO perflog (";
    updateQuery += "             deviceModel,";
    updateQuery += "             sessStartMs,";
    updateQuery += "             srcLine,";
    updateQuery += "             query,";
    updateQuery += "             queryStartMs,";
    updateQuery += "             queryStopMs,";
    updateQuery += "             numAentvalue,";
    updateQuery += "             numArchentity,";
    updateQuery += "             numRelationship,";
    updateQuery += "             numAentreln";
    updateQuery += " )    SELECT %s, %s, %s, %s, %s, %s, a, av, r, ar";
    updateQuery += "        FROM";
    updateQuery += "             (SELECT COUNT(*) AS a  FROM archentity  ) a,";
    updateQuery += "             (SELECT COUNT(*) AS av FROM aentvalue   ) av,";
    updateQuery += "             (SELECT COUNT(*) AS r  FROM relationship) r,";
    updateQuery += "             (SELECT COUNT(*) AS ar FROM aentreln    ) ar";

    updateQuery = dbReplaceFirst(updateQuery, deviceModel);
    updateQuery = dbReplaceFirst(updateQuery, sessStartMs);
    updateQuery = dbReplaceFirst(updateQuery, srcLine);
    updateQuery = dbReplaceFirst(updateQuery, query);
    updateQuery = dbReplaceFirst(updateQuery, queryStartMs);
    updateQuery = dbReplaceFirst(updateQuery, queryStopMs);

    fetchOne(updateQuery);
  }

  return this;
}

void timedFetchOne(String q, FetchCallback cb, int callerIdx) {
  if (!PERF_DO_LOG_QUERIES) {
    fetchOne(q, cb);
    return;
  }

  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchOne(q, tcb);
}

void timedFetchAll(String q, FetchCallback cb, int callerIdx) {
  if (!PERF_DO_LOG_QUERIES) {
    fetchAll(q, cb);
    return;
  }

  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchAll(q, tcb);
}

void timedFetchOne(String q, FetchCallback cb) {
  timedFetchOne(q, cb, 2);
}

void timedFetchAll(String q, FetchCallback cb) {
  timedFetchAll(q, cb, 2);
}

void timedFetchOne(String q) {
  timedFetchOne(q, null, 2);
}

void timedFetchAll(String q) {
  timedFetchAll(q, null, 2);
}

void timedPopulateCursorList(String ref, String q, int limit) {
  if (PERF_DO_LOG_QUERIES) {
    String boundQ = q;
    boundQ = dbReplaceFirst(boundQ, "?", limit + "");
    boundQ = dbReplaceFirst(boundQ, "?", "0");
    timedFetchAll(boundQ, null, 2);
  }

  populateCursorList(ref, q, limit);
}

void setUpTypeHierarchy() {
  {{perf-type-hierarchy}}
  PERF_TYPE_TREE = n0;
}

setUpTypeHierarchy();

void saveEntitiesToPCRel(
    String parentType,
    String childType,
    String parentUuid,
    String childUuid
) {
    String relName = parentType + " - " + childType;
    String pOf     = "Parent Of";
    String cOf     = "Child Of";
    saveEntitiesToHierRel(relName, parentUuid, childUuid, pOf, cOf, "");
}

String randomMenuValue(String ref) {
  List vocabIds = getVocabIdsFromRef(ref);
  int  len      = vocabIds.size();
  if (len <= 0)
    return "";

  Random r   = new Random();
  int    i   = r.nextInt(len);

  return vocabIds.get(i);
}

String getRandomString(int len) {
  char[] chars  = (
      "abcdefghijklmnopqrstuvwxyz" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "1234567890"
  ).toCharArray();
  Random random = new Random();

  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < len; i++) {
      char c = chars[random.nextInt(chars.length)];
      sb.append(c);
  }

  return sb.toString();
}

String randomInputValue(String ref) {
  int len = 5;
  randomInputValue(ref, len);
}

String randomInputValue(String ref, int len) {
  if (getType(ref).equals("camera"))
    if (PERF_FILES.isEmpty()) {
      Log.e("randomInputValue()", "PERF_FILES empty, using empty string");
      return "";
    } else {
      return PERF_FILES.poll();
    }
  else
    return getRandomString(len);
}

List getAttribs(String archEntType) {
  List attribs = new ArrayList();
  for (String ref : REF_TO_TYPE.keySet()) {
    String archEntTypeActual = getArchEntType(ref);
    if (!archEntType.equals(archEntTypeActual))
      continue;
    if (!hasData(ref))
      continue;
    if (hasMediaType(ref) && !getType(ref).equals("camera"))
      continue;

    String attribName = getAttributeName(ref);
    String annotation = "";
    String vocab      = "";
    String measure    = "";
    String certainty  = "1.0";

    if (hasMenuType(ref)) vocab   = randomMenuValue (ref);
    else                  measure = randomInputValue(ref);

    EntityAttribute ea = createEntityAttribute(
        attribName,
        annotation,
        vocab,
        measure,
        certainty
    );
    attribs.add(ea);
  }

  return attribs;
}

void displayRecordDigest(int numCreated) {
  String q = "";
  q += "   SELECT '{All}', count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "    UNION";
  q += "   SELECT aenttypename, count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += " GROUP BY aenttypename";

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      String head = "{perf_digest_1_head}";
      String body = "";
      if (numCreated >= 0)
        body += numCreated + " {perf_digest_1_body_1}";
      body += " {perf_digest_1_body_2}";

      for (List row : result) {
        String type = row.get(0);
        String num  = row.get(1);

        body += "\t- " + type + ": " + num + "\n";
      }

      if (dialog != null)
        dialog.dismiss();
      showWarning(head, body);
    }
  };

  fetchAll(q, cb);
}

void displayRecordDigest() {
  displayRecordDigest(-1);
}

PerfSaveCallback(tree, String parentUuid) {
  tree              = tree;
  String parentUuid = parentUuid;

  saveRel(uuid) {
    parent            = super.tree.getParent();
    String parentUuid = super.parentUuid;

    if (parent == null || parentUuid == null)
      return;

    String parentType = parent    .label;
    String childType  = super.tree.label;

    saveEntitiesToPCRel(parentType, childType, parentUuid, uuid);
  }

  void onSave(String uuid, boolean newRecord) {
    int cbsDone = PERF_NUM_CBS_DONE_SAVE.incrementAndGet();
    int cbsTodo = PERF_NUM_CBS_TODO_SAVE.get();
    if (cbsTodo == cbsDone)
      displayRecordDigest(cbsDone);

    if (newRecord)
      saveRel(uuid);

    for (subtree : super.tree.getChildren())
      saveArchEnts(subtree, uuid);
  }

  void onError(String message) {
    if (dialog != null)
      dialog.dismiss();
    showWarning("Error", message);
  }

  return this;
}

void saveArchEnts(tree, String parentUuid) {
  String archEntName = tree.label;
  int    numEnts     = tree.data;
  cb                 = PerfSaveCallback(tree, parentUuid);

  for (int i = 0; i < numEnts; i++) {
    List attribs = getAttribs(archEntName);
    saveArchEnt(null, archEntName, (List) null, attribs, cb);
  }
}

void createDummyRecords() {
  // Unless syncing is disabled, 'database locked' errors will happen
  setFileSyncEnabled(false);
  setSyncEnabled    (false);

  enqueueTestFiles("createDummyRecordsRecursively()");
}

void createDummyRecordsRecursively() {
  int n = getNumDummyRecords();
  PERF_NUM_CBS_TODO_SAVE = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SAVE = new AtomicInteger(0);

  dialog = showBusy("{perf_dummy_busy_head}", n + " {perf_dummy_busy_body}");

  for (child : PERF_TYPE_TREE.getChildren())
    saveArchEnts(child, null);
}

void enqueueTestFiles(String cb) {
  enqueueTestFiles(getNumDummyRecords(), cb);
}

void enqueueTestFiles(int numFiles, String cb) {
  if (PERF_TEST_IMG == null || PERF_TEST_IMG.equals("")) {
    Log.e("enqueueTestFiles()", "Could not enqueue test files");
    return;
  }

  // Set `PERF_FILES`
  if (PERF_FILES == null)
    PERF_FILES = new ConcurrentLinkedQueue();

  // Set `PERF_NUM_CBS_TODO_FILE` and `PERF_NUM_CBS_DONE_FILE`
  int maxNumPhotosPerRecord = 2;
  int n = getNumDummyRecords() * maxNumPhotosPerRecord
      - PERF_FILES.size(); // No need to make files if there's enough in queue

  PERF_NUM_CBS_TODO_FILE = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_FILE = new AtomicInteger(0);

  // Make records
  for (int i = 0; i < n; i++) {
    String fileName = attachFile(
        PERF_TEST_IMG,
        false,
        null,
        "checkEnqueueTestFilesIsDone(\"" + escape(cb) + "\")"
    );

    PERF_FILES.add(fileName);
  }
}

void checkEnqueueTestFilesIsDone(String onDone) {
  int cbsDone = PERF_NUM_CBS_DONE_FILE.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_FILE.get();
  if (cbsTodo == cbsDone)
    execute(onDone);
}

PerfImageDownloader() {
  void run() {
    String filStr = "/sdcard/faims/modules/" + getModuleId() +
        "/files/app/test.jpg";
    String urlStr = "http://placeholdit.imgix.net/" +
        "~text?txtsize=100&txt=TEST&w=200&h=200&fm=jpg";

    // Download test image
    new File(filStr).getParentFile().mkdirs();

    long tenMb = 10 * 1024 * 1024;
    URL urlObj = new URL(urlStr);
    ReadableByteChannel in  = Channels.newChannel(urlObj.openStream());
    FileChannel out = new FileOutputStream(filStr).getChannel();
    out.transferFrom(in, 0, tenMb);

    // Set `PERF_TEST_IMG` if the file was created successfully
    File newImg = new File(filStr);
    if (newImg.length() > 0)
      PERF_TEST_IMG = filStr;
  }

  void start() {
    Runnable r = PerfImageDownloader();
    new Thread(r).start();
  }

  return this;
}

void verifyEnableRecordCreation() {
  String q = "";
  q += " SELECT userid, fname, lname, email, password";
  q += "   FROM user";
  q += "  WHERE fname = 'Faims'";
  q += "    AND lname = 'Admin'";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String userId    = result.get(0);
      String nameFirst = result.get(1);
      String nameLast  = result.get(2);
      String email     = result.get(3);
      String password  = result.get(4);

      User user = new User(userId, nameFirst, nameLast, email, password);
      setUser(user);

      showVerifyUserDialog("enableRecordCreation()");
    }
  };

  fetchOne(q, callback);
}

void enableRecordCreation() {
  PERF_ALLOW_CREATION = true;
  setUpPerfActionBarItems();

  showWarning("{perf_create_on_head}", "{perf_create_on_body}");
}

boolean isInTestTime() {
  return {{is-in-test-time}};
}

// Produce entity number specification
void setUpDummyRecordCreation() {
  int n = PERF_TYPE_TREE.getNumNodes()
      - 1; // Ignore root node

  PERF_NUM_CBS_TODO_SET = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SET = new AtomicInteger(0);

  setUpDummyRecordCreation(PERF_TYPE_TREE, "");
}

String getBreadCrumbs(node) {
  return node.getAncestorRefString(" › ", "label");
}

String typeToReadableType(String type) {
  if (type.equals("")) return "{this_module}";
  else                 return "{each} " + type;
}

void setUpDummyRecordCreation(tree, String parentType) {
  String type = tree.label;

  for (child : tree.getChildren())
    setUpDummyRecordCreation(child, type);

  if (!type.equals("")) {
    // Make head and body for `showTextAlert`
    String treeRef = tree.getAncestorRefString();
    String head    = getBreadCrumbs(tree);
    String body    = "{perf_rec_num_body_1} %s {perf_rec_num_body_2} %s " +
                     "{perf_rec_num_body_3}";
    body = replaceFirst(body, type);
    body = replaceFirst(body, typeToReadableType(parentType));

    promptSetDummyRecordQuantity(treeRef, head, body);
  }
}

void promptSetDummyRecordQuantity(String treeRef, String head, String body) {
  String cb = "setDummyRecordQuantity(\"%s\", \"%s\", \"%s\")";
  cb = replaceFirst(cb, treeRef);
  cb = replaceFirst(cb, head);
  cb = replaceFirst(cb, escape(body));

  showTextAlert(head, body, cb, "checkSetDummyRecordQuantityIsDone()");
}

void setDummyRecordQuantity(
    String treeRef,
    String failHead,
    String failBody
) {
  // Parse data as int
  int intData;
  try {
    intData = Integer.parseInt(getLastTextAlertInput());
  } catch (Exception e) {
    promptSetDummyRecordQuantity(treeRef, failHead, failBody);
    return;
  }

  PERF_TYPE_TREE.getDescendant(treeRef).data = intData;
  checkSetDummyRecordQuantityIsDone();
}

void checkSetDummyRecordQuantityIsDone() {
  int cbsDone = PERF_NUM_CBS_DONE_SET.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_SET.get();
  if (cbsTodo == cbsDone) {
    String totalRecs = getNumDummyRecords() + "";
    String treeString = PERF_TYPE_TREE.toString();
    String treeStringNoRoot = treeString.substring(
        "\n-  (1)".length(),
        treeString.length()
    );

    String head = "{perf_update_head}";
    String body =
         "{perf_update_body_1} " + treeStringNoRoot +
        " {perf_update_body_2} " + totalRecs +
        " {perf_update_body_3}";

    showAlert(head, body, "createDummyRecords()", "");
  }
}

void verifyCreateDummyRecords() {
  showAlert(
      "{perf_wiz_head}",
      "{perf_wiz_body}",
      "setUpDummyRecordCreation()",
      ""
  );
}

void setUpPerfActionBarItems() {
  removeActionBarItem("create_dummy_records");
  removeActionBarItem("display_record_digest");
  removeActionBarItem("enable_record_creation");

  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);
  if (!isDisplayed(userMenuTabGroup))
    return;
  if (!isInTestTime())
    return;

  ActionButtonCallback createDummyRecords = new ActionButtonCallback() {
      actionOnLabel() {
        "{create_dummy_records}";
      }
      actionOn() {
        verifyCreateDummyRecords();
      }
  };

  ActionButtonCallback displayRecordDigest = new ActionButtonCallback() {
      actionOnLabel() {
        "{display_record_digest}";
      }
      actionOn() {
        displayRecordDigest();
      }
  };

  ActionButtonCallback enableRecordCreation = new ActionButtonCallback() {
      actionOnLabel() {
        "{enable_record_creation}";
      }
      actionOn() {
        verifyEnableRecordCreation();
      }
  };

  // Careful! The `if` statements are weirdly formatted
  addActionBarItem("display_record_digest",  displayRecordDigest);
  if (PERF_ALLOW_CREATION)
  addActionBarItem("create_dummy_records",   createDummyRecords);
  if (!PERF_ALLOW_CREATION)
  addActionBarItem("enable_record_creation", enableRecordCreation);
}

void setUpPerfTestMode() {
  if (!isInTestTime())
    return;

  // Enable performance logging
  PERF_DO_LOG_QUERIES = true;

  // Download test image
  PerfImageDownloader().start();

  // Display performance testing notification
  showWarning("{perf_mode_head}", "{perf_mode_body}");
}

if (!isNull(USER_MENU_PATH)) {
  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);

  setUpPerfTestMode();
  addOnEvent(userMenuTabGroup, "show",  "setUpPerfActionBarItems()");
  addOnEvent(userMenuTabGroup, "leave", "setUpPerfActionBarItems()");
}

/******************************************************************************/
/*                           LOCALSETTINGS UPDATES                            */
/******************************************************************************/
void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val) {
  String q = "REPLACE INTO localSettings(key, value) VALUES(%s, %s)";
  q = dbReplaceFirst(q, key);
  q = dbReplaceFirst(q, val);
  timedFetchOne(q);
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite,
    String defaultVal
) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = %s";
  q = dbReplaceFirst(q, key);

  FetchCallback set = new FetchCallback() {
    onFetch(result) {
      if (result != null && result.size() >= 1) {
        setFieldValue(ref, result.get(0));
      } else if (defaultVal != null) {
        setFieldValue(ref, defaultVal);
      }
    }
  };

  timedFetchOne(q, set);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  val,
    boolean doOverwrite
) {
  setFieldValueFromLocalSettings(key, val, doOverwrite, null);
}

void setFieldValueFromLocalSettings(
    String  ref,
    boolean doOverwrite,
    String  defaultVal
) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite, defaultVal);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnShow(
    String ref,
    boolean doOverwrite,
    String defaultVal
) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite, defaultVal}
  );

  addOnEvent(getTabGroupRef(ref), "show", cb);
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, (String) null);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref, boolean doOverwrite, String defaultVal) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, defaultVal);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, String defaultVal) {
  persistOverSessions(ref, false, defaultVal);
}

void persistOverSessions(String ref) {
  persistOverSessions(ref, false, (String) null);
}

{{binds-persist}}

/******************************************************************************/
/*                           FIELD COPYING HELPERS                            */
/*                                                                            */
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;
  else {
    setFieldValue(ref, vocabId);
    return true;
  }
}

void copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
void copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  String vocabIdSrc   = getFieldValue(src);
  String vocabNameSrc = getFieldValue(src, true);

  String attrNameSrc = getAttributeName(src);
  String attrNameDst = getAttributeName(dst);

  if (attrNameSrc.equals(attrNameDst) || !doFindVocabId) {
    setFieldValue(dst, vocabIdSrc);
    return;
  }

  if (!setMenuValue(dst, vocabNameSrc)) {
    // Fall back to dumb field copying
    copyFieldValue(src, dst, false);
  }
}

boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

void clearField(String ref) {
  switch(getType(ref)) {
    case "dropdown": setFieldValue(ref, null); break;
    case "list":     return;
    default:         setFieldValue(ref, "");
  }
}

void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");


  String dstParent = getTabGroupRef(dst);
  if (isFlaggedNodata(dstParent)) addOnEvent(dstParent, "show",   fun);
  else                            addOnEvent(dstParent, "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, false);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}

{{binds-inheritance}}

/******************************************************************************/
/*                            NEW TAB REDIRECTION                             */
/*                                                                            */
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/

void newTab(String tab, Boolean resolveTabGroups) {
  if (!resolveTabGroups) {
    return newTab(tab);
  }

  String tabGroupRef = getTabGroupRef(tab);
  String tabRef      = getTabRef     (tab);

  if (!isDisplayed(tabGroupRef)) newTabGroup(tabGroupRef);
  if (!isNull     (tabRef     )) newTab     (tabRef);
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

for (entry : REF_TO_TYPE.entrySet()) {
  String type = entry.getValue();
  String ref  = entry.getKey();
  String evt  = "click";
  String stmt = "DROPDOWN_ITEM_VALUE = getFieldValue(\"%s\")";
  stmt = replaceFirst(stmt, ref);

  if (!type.equals("dropdown"))
    continue;
  if (hasNoUi(ref))
    continue;

  addOnEvent(ref, evt, stmt);
}

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Wrapper for to make a vocab without an exlusion list **/
String getMakeVocabType(String ref) {
  if (isHier(ref)) return "hierarchical" + getType(ref);
  else             return ""             + getType(ref);
}

void makeVocabs() {
  for (String ref : DATA_REFS)
    if (!hasNoUi(ref))
      makeVocab(ref);
  for (String ref : VP_REF_TO_REF.keySet())
    if (!hasNoUi(ref))
      makeVocab(ref);
}

void makeVocab(String ref) {
  if (hasVpRef(ref))
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(getVpRef(ref)));
  else
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(ref));
}

void makeVocab(String type, String ref, String attrName) {
  makeVocab(type, ref, attrName, null);
}
void makeVocab(String type, String ref, String attrName, List vocabExclusions) {
    makeVocab(type, ref, attrName, vocabExclusions, null);
}

/* Populates the ref specified vocabulary from the database based on the given
 * attribute name, where type is the type of the vocab to populate (checkbox,
 * dropdown, hierarchicaldropdown, hierarchicalpicture, list, picture, radio).
 * */
void makeVocab(
    String type,
    String ref,
    String attrName,
    List   vocabExclusions,
    String callbackFunction
){
  if (!hasMenuType(ref))
    return;

  if (
      isNull(type) ||
      isNull(ref) ||
      isNull(attrName)
  ) {
    Log.e(
        "makeVocab()",
        "Can't make populate vocab whose type, ref or attribute is null"
    );
    return;
  }

  // Make a filtered vocab
  List menuEntries = getMenuEntries(attrName);
  if (vocabExclusions == null) vocabExclusions = new ArrayList();

  List filteredVocab = new ArrayList();
  for(item : menuEntries) {
    if (vocabExclusions.contains(item.get(1))) {
      Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
    } else {
      filteredVocab.add(item);
    }
  }

  // Determine whether to include a null option in the menu
  Boolean hasNull =
         !vocabExclusions.contains("")
      && !vocabExclusions.contains(null);

  // Populate menu
  switch(type) {
    case "checkbox":
      populateCheckBoxGroup             (ref, filteredVocab);          break;
    case "dropdown":
      populateDropDown                  (ref, filteredVocab, hasNull); break;
    case "hierarchicaldropdown":
      populateHierarchicalDropDown      (ref, attrName, hasNull);      break;
    case "hierarchicalpicture":
      populateHierarchicalPictureGallery(ref, attrName);               break;
    case "list":
      populateList                      (ref, filteredVocab);          break;
    case "picture":
      populatePictureGallery            (ref, filteredVocab);          break;
    case "radio":
      populateRadioGroup                (ref, filteredVocab);          break;
  }

  // Execute callback
  if (!isNull(callbackFunction))
    execute(callbackFunction);
}

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME        = null;
Map VOCABNAME_TO_VOCABID        = null;
Map ATTRIB_NAME_TO_VOCABIDS     = null;
Map ATTRIB_NAME_TO_MENU_ENTRIES = null;

void setVocabId(String attrName, String vocabName, String vocabId) {
  if (VOCABNAME_TO_VOCABID == null)
    VOCABNAME_TO_VOCABID = new HashMap();

  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

void addVocabId(String attrName, String vocabId) {
  if (ATTRIB_NAME_TO_VOCABIDS == null)
    ATTRIB_NAME_TO_VOCABIDS = new HashMap();

  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attrName);
  if (vocabIds == null) {
    vocabIds = new ArrayList();
    ATTRIB_NAME_TO_VOCABIDS.put(attrName, vocabIds);
  }

  vocabIds.add(vocabId);
}

void addMenuEntry(
    String attrName,
    String vocabId,
    String vocabName,
    String picUrl
) {
  if (ATTRIB_NAME_TO_MENU_ENTRIES == null)
    ATTRIB_NAME_TO_MENU_ENTRIES = new HashMap();

  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    ATTRIB_NAME_TO_MENU_ENTRIES.put(attrName, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(vocabId);
  menuEntry.add(vocabName);
  menuEntry.add(picUrl);

  menuEntries.add(menuEntry);
}

List getMenuEntries(String attrName) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) return new ArrayList();
  else                     return menuEntries;
}

List getVocabIdsFromAttribName(String attribName) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attribName);
  if (vocabIds == null) return new ArrayList();
  else                  return vocabIds;
}

List getVocabIdsFromRef(String ref) {
  String attribName = getAttributeName(ref);
  return getVocabIdsFromAttribName(attribName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues(String cb) {
  VOCABID_TO_VOCABNAME = new HashMap();

  String q = "";
  q += "   SELECT vocabid, vocabname, attributename, pictureurl";
  q += "     FROM vocabulary";
  q += "     JOIN attributekey USING (attributeid)";
  q += " ORDER BY vocabcountorder";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(List result) {
      for (List row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        String attrName  = row.get(2);
        String picUrl    = row.get(3);

        // Populate VOCABID_TO_VOCABNAME
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);

        // Populate VOCABNAME_TO_VOCABID
        setVocabId(attrName, vocabName, vocabId);

        // Populate ATTRIB_NAME_TO_VOCABIDS
        addVocabId(attrName, vocabId);

        // Populate ATTRIB_NAME_TO_MENU_ENTRIES
        addMenuEntry(attrName, vocabId, vocabName, picUrl);
      }

      execute(cb);
    }
  };

  timedFetchAll(q, populateHashMap);
}

fetchMenuValues("makeVocabs()");

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                    GPS                                     */
/******************************************************************************/
{{gps-diag-update}}

void updateGPSDiagnostics() {
  String diagnosticsRef = "{{gps-diag-ref}}";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
void populateListForUsers(){
  String q = "";
  q  = " SELECT          userid ";
  q += "        ||'\\0'||fname ";
  q += "        ||'\\0'||lname ";
  q += "        ||'\\0'||email ";
  q += "        ||'\\0'||password ";
  q += "        ,        fname ";
  q += "        || ' ' ||lname ";
  q += "   FROM user ";
  q += "  WHERE userdeleted is null";

  timedFetchAll(q, new FetchCallback() {
    onFetch(result) {
      {{users-populate-call}}
    }
  });
}

String getUserMenuValue(int i) {
  {{users-selecteduser}}
  if (selectedUser == null)
    return "";

  String[] splitted = selectedUser.split("\\\\0");
  if (i < splitted.length) return splitted[i];
  else                     return "";

}

void selectUser() {
  userId           = getUserMenuValue(0);
  String nameFirst = getUserMenuValue(1);
  String nameLast  = getUserMenuValue(2);
  String email     = getUserMenuValue(3);
  String password  = getUserMenuValue(4);
  username         = nameFirst + " " + nameLast;

  if (!isNull(userId)) {
    User user = new User(userId, nameFirst, nameLast, email, password);
    setUser(user);
  }
}

if (!isNull(USER_MENU_PATH)) {
  addOnEvent(USER_MENU_PATH, "show",  "populateListForUsers()");
  addOnEvent(USER_MENU_PATH, "click", "selectUser()");
}

/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/ref to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "{please_fill_out_the_following_fields}";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "{all_fields_contain_valid_data}";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

{{validation}}

/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = Collections.synchronizedMap(new HashMap());

String getUuid(String tabgroup) {
  return tabgroupToUuid.get(tabgroup);
}

void setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave      = true;
  String  id                  = getUuid(tabgroup);
  List    geometry            = null;
  List    attributes          = null;
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");

  callback += "; onSave" + getArchEntTypePascalCased(tabgroup) + "__()";

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, callback);
      }

    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  String left; String right;

  left    = dateStr.substring(0, dateStr.length() - 2);
  right   = dateStr.substring(   dateStr.length() - 2);
  dateStr = left + ":" + right;

  return dateStr;
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  {{author}}
  {{timestamp}}
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  if (!isNull(authorPath))    setFieldValue(authorPath,    username);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, getTimestampNow());
}

{{defs-on-show}}
{{binds-on-show}}

{{defs-on-click}}
{{binds-on-click}}

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/
{{binds-media}}

/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/
{{binds-files}}

/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  {{tabgroups-to-validate}}
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    timedFetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  String deleteTabGroupFunction = "delete" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "deleteTabgroup()"
  eval(deleteTabGroupFunction);

  Log.d("deleteRecord", tabgroup);
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = "onSave" + childArchEntType.replaceAll(" ", "") + "__()";

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  timedFetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        String head  = "{err_load_entity_head}";
        String body  = "{err_load_entity_body}";
        showWarning(head, body);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}

{{defs-tabgroup-binds}}
{{binds-onsave}}

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

{{binds-nav-buttons-del}}
{{binds-nav-buttons-add}}

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
{{binds-search}}

{{search-entities}}

void clearSearch(){
  setFieldValue("{{tab-group-search}}/Search/Search_Term","");
}

void search(){
  String refEntityList  = "{{tab-group-search}}/Search/Entity_List";
  String refSearchTerm  = "{{tab-group-search}}/Search/Search_Term";
  String refEntityTypes = "{{tab-group-search}}/Search/Entity_Types";

  {{type-search}}
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE {term}||'%'  "+
                       "                   AND ( aenttypename = {type} OR '' = {type} ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  timedPopulateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("{{tab-group-search}}");

  Log.d("Module", "Search query: " + searchQuery);
}

{{defs-load-entity}}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
{{binds-take-from-gps}}

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  {{take-from-gps-mappings}}
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("{Please_enter_data_first}");
    return;
  }

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab ref. */
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent, vocabulary " +
                 " WHERE uuid = '" + currentUuid + "';";

  timedFetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/******************************************************************************/
/*               LOADING AND CREATION OF RECORDS FROM QR CODES                */
/******************************************************************************/
void bindQrScanning(String refButton, String refField) {
  String event = "click";

  String stmt = fun2str("scanRecordFromQrCode", refField);

  addOnEvent(refButton, event, stmt);
}

void scanRecordFromQrCode(String ref) {
  String callback = fun2str("loadOrCreateEntityFromScannedAttrib", ref);
  scanCode(callback);
}

void loadOrCreateEntityFromScannedAttrib(String ref) {
  String attrName = getAttributeName(ref);
  String attribVal  = getLastScanContents();

  String q = "";
  q += "SELECT uuid ";
  q += "  FROM latestnondeletedaentvalue ";
  q += "  JOIN latestnondeletedarchent USING (uuid) ";
  q += "  JOIN attributekey            USING (attributeid) ";
  q += " WHERE attributename = {attrName} ";
  q += "   AND measure       = {attribVal} ";
  q  = dbReplaceFirst(q, "{attrName}",  attrName );
  q  = dbReplaceFirst(q, "{attribVal}", attribVal);

  FetchCallback loadOrCreateEntity = new FetchCallback() {
    onFetch(result) {
      if (isNull(result) || result.size() == 0) {
        createRecordFromScannedAttrib(ref);
      } else {
        String uuid = result.get(0).get(0);
        loadEntityFrom(uuid);
      }
    }
  };

  timedFetchAll(q, loadOrCreateEntity);
}

void initScannedAttrib(String ref) {
  String oldCode = getFieldValue(ref);
  String newCode = getLastScanContents();

  if (isNull(oldCode))
    setFieldValue(ref, newCode);
}

void createRecordFromScannedAttrib(String ref) {
  String tabGroup = getTabGroupRef(ref);
  newRecord(tabGroup);

  initScannedAttrib(ref);
}

{{binds-qr}}

/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

for (String ref : getStartingIdRefs())
  persistOverSessions(ref, "1");

void incAutoNum(String destPath) {
  Map destToSource = new HashMap();
  {{incautonum-map}}

  String sourcePath = destToSource.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `ref`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String ref,
  String parentUuid,
  String entType,
  String relType
) {
  String viewType = getType(ref);

  String limit;
  switch (viewType) {
    case "dropdown": limit = "";                   break;
    case "list":     limit = " LIMIT ? OFFSET ? "; break;
  }

  String getChildEntitiesQ = "" +
    "SELECT childuuid, response " +
    "  FROM (select childuuid, createdat" +
    "          from (select childuuid, createdat, relationshipid" +
    "                    from parentchild" +
    "                   where parentuuid = '" + parentUuid + "' " +
    "                   and (childaenttypename = '"+entType+"')" +
    "                   order by createdat           " +
    "                   )" +
    "          JOIN (SELECT relationshipid   " +
    "                  FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  " +
    "                 WHERE relntypename = '"+relType+"') USING (relationshipid)" +
    "          order by createdat desc" +
    limit +
    "        )  " +
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)   " +
    "  order by createdat desc";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response " +
    limit;

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result, true);
    }
  };

  String q;
  if (relType.equals("")) q = getEntitiesQ;
  else                    q = getChildEntitiesQ;

  switch (viewType) {
    case "dropdown": timedFetchAll(q, cbPopulateDropDown); break;
    case "list":     timedPopulateCursorList(ref, q, 25);  break;
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String ref          = m[0];
    String menuTabGroup = getTabGroupRef(ref);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[2];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String ref            = menuDescriptor[0];
  String parentUuidCall = menuDescriptor[1];
  String entType        = menuDescriptor[2];
  String relType        = menuDescriptor[3];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + ref            + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();
{{entity-menus}}
for (m : ENTITY_MENUS) {
  String functionCall = getEntityMenuPopulationFunction(m);
  execute(functionCall);
}
for (m : ENTITY_MENUS) {
  String menuRef = m[0];

  String ref = getTabRef(menuRef);
  String evt = "show";
  String cmd = "clearField(\"{menuRef}\")";
  cmd = replaceFirst(cmd, "{menuRef}", menuRef);

  addOnEvent(ref, evt, cmd);
}

{{entity-loading}}
/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/
{{hand-written-logic}}

/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
